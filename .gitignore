# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Project-specific ignores
# Runtime logs and outputs
run_log_*.json
mcp_result_*.json
eval_*.json
*.zip

# Test artifacts and temporary directories
artifacts/nobel/runs/*/
artifacts/nobel/test_*/
outputs/figures/*/
enhanced_figures/

# Temporary files and directories
temp/
tmp/
.temp/

# ===== SENSITIVE DATA PROTECTION =====
# Environment configuration files (all variants)
.env*
!.env.example
!.env.template
.envrc*

# API Keys and credentials
*.key
*.pem
*.p12
*.pfx
*.crt
*.cer
api_keys/
credentials/
secrets/
.secrets/

# Local configuration files
config.local.*
*config.local*
local_config.*
.local/
user_config.*

# Encrypted data and key storage
*.encrypted
*.enc
keystore/
.keystore/
vault/
.vault/

# Authentication tokens and sessions
*.token
*.jwt
.auth/
session_*
auth_cache/

# Database files with potential sensitive data
*.db
*.sqlite
*.sqlite3
local.db*

# Log files that might contain sensitive information
*.log
logs/
.logs/
debug.log*
error.log*
access.log*
api.log*

# Cache directories that might store sensitive data
.cache/
cache/
.api_cache/
.model_cache/
.llm_cache/

# Backup files that might contain sensitive data
*.bak
*.backup
*.old
*~
.backup/
backups/

# IDE and editor specific files with potential sensitive data
.vscode/settings.json
.vscode/launch.json
.idea/workspace.xml
.idea/tasks.xml
.idea/dictionaries/
.idea/shelf/

# OS specific files that might contain metadata
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Development and testing artifacts with potential sensitive data
test_data/
test_results/
.test_cache/
mock_data/
sample_data/
dev_data/

# AI/ML model files and data (might contain training data)
*.model
*.pkl
*.pickle
models/
checkpoints/
.models/

# Jupyter notebook checkpoints and outputs
.ipynb_checkpoints/
*/.ipynb_checkpoints/
*.ipynb_checkpoints

# Local development servers and processes
.pid
*.pid
.sock
*.sock

# Package manager lock files with potential version vulnerabilities
# (uncomment if you want to ignore them)
# package-lock.json
# yarn.lock
# Pipfile.lock

# ===== PROJECT SPECIFIC SENSITIVE DATA =====
# Local aisuite installation path configurations
aisuite_local/
.aisuite_path

# MCP server runtime data
mcp_runtime/
.mcp_state/
server_state.json

# Agent conversation histories (might contain sensitive prompts)
conversation_history/
chat_logs/
agent_logs/

# Evaluation results with potential sensitive data
eval_results/
evaluation_data/
benchmark_data/

# User-specific artifacts and outputs
user_artifacts/
personal_outputs/
custom_templates/

# Local test outputs and generated artifacts that shouldn't be tracked
test_output/
outputs/
test_accessibility_figures/
